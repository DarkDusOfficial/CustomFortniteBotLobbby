import { Collection } from '@discordjs/collection';
import Base from '../client/Base';
import Friend from './friend/Friend';
import IncomingPendingFriend from './friend/IncomingPendingFriend';
import OutgoingPendingFriend from './friend/OutgoingPendingFriend';
import { PresenceOnlineType } from '../../resources/structs';
import SentFriendMessage from './friend/SentFriendMessage';
import Client from '../client/Client';
declare class FriendsManager extends Base {
    /**
     * Friend list
     */
    list: Collection<string, Friend>;
    /**
     * Pending friend requests (incoming or outgoing)
     */
    pendingFriends: Collection<string, IncomingPendingFriend | OutgoingPendingFriend>;
    constructor(constr: Client);
    /**
     * Sets the clients XMPP status
     * @param status The status
     * @param onlineType The presence's online type (eg "away")
     * @param friend A specific friend you want to send this status to
     * @throws {FriendNotFoundError} The user does not exist or is not friends with the client
     */
    setStatus(status?: string, onlineType?: PresenceOnlineType, friend?: string): void;
    /**
     * Resets the client's XMPP status and online type
     */
    resetStatus(): Promise<void>;
    /**
     * Sends a friendship request to a user or accepts an existing request
     * @param friend The id or display name of the user to add
     * @throws {UserNotFoundError} The user wasn't found
     * @throws {DuplicateFriendshipError} The user is already friends with the client
     * @throws {FriendshipRequestAlreadySentError} A friendship request has already been sent to the user
     * @throws {InviterFriendshipsLimitExceededError} The client's friendship limit is reached
     * @throws {InviteeFriendshipsLimitExceededError} The user's friendship limit is reached
     * @throws {InviteeFriendshipSettingsError} The user disabled friend requests
     * @throws {InviteeFriendshipRequestLimitExceededError} The user's incoming friend request limit is reached
     * @throws {EpicgamesAPIError}
     */
    add(friend: string): Promise<void>;
    /**
     * Removes a friend from the client's friend list or declines / aborts a pending friendship request
     * @param friend The id or display name of the friend
     * @throws {FriendNotFoundError} The user does not exist or is not friends with the client
     * @throws {EpicgamesAPIError}
     */
    remove(friend: string): Promise<void>;
    /**
     * Fetches the friends the client shares with a friend
     * @param friend The id or display name of the friend
     * @throws {FriendNotFoundError} The user does not exist or is not friends with the client
     * @throws {EpicgamesAPIError}
     */
    getMutual(friend: string): Promise<Friend[]>;
    /**
     * Checks whether a friend owns a specific offer
     * @param friend The id or display name of the friend
     * @param offerId The offer id
     * @throws {OfferNotFoundError} The offer does not exist or is not in the current storefront catalog
     * @throws {FriendNotFoundError} The user does not exist or is not friends with the client
     * @throws {EpicgamesAPIError}
     */
    checkOfferOwnership(friend: string, offerId: string): Promise<boolean>;
    /**
     * Blocks a user
     * @param user The id or display name of the user
     * @throws {UserNotFoundError} The user wasn't found
     * @throws {EpicgamesAPIError}
     */
    block(user: string): Promise<void>;
    /**
     * Unblocks a user
     * @param user The id or display name of the user
     * @throws {UserNotFoundError} The user wasn't found
     * @throws {EpicgamesAPIError}
     */
    unblock(user: string): Promise<void>;
    /**
     * Sends a message to a friend
     * @param friend The id or display name of the friend
     * @param content The message that will be sent
     * @throws {FriendNotFoundError} The user does not exist or is not friends with the client
     * @throws {SendMessageError} The messant could not be sent
     */
    sendMessage(friend: string, content: string): Promise<SentFriendMessage>;
    /**
     * Resolves a single user id
     * @param query Display name or id of the account's id to resolve
     */
    private resolveUserId;
}
export default FriendsManager;
